// Source code is decompiled from a .class file using FernFlower decompiler.
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

public class InputLouis {
   public InputLouis() {
   }

   public static void main(String[] args) {
      SwingUtilities.invokeLater(() -> {
         PuzzleGUI puzzleGUI = new PuzzleGUI("", new String[0]);
         puzzleGUI.startGame();
         attachFileOpenListener(puzzleGUI);
      });
   }

   private static void attachFileOpenListener(PuzzleGUI puzzleGUI) {
      JMenuItem openItem = puzzleGUI.getFrame().getJMenuBar().getMenu(0).getItem(0);
      openItem.addActionListener((e) -> {
         JFileChooser fileChooser = new JFileChooser();
         FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", new String[]{"txt"});
         fileChooser.setFileFilter(filter);
         int returnVal = fileChooser.showOpenDialog(puzzleGUI.getFrame());
         if (returnVal == 0) {
            String filePath = fileChooser.getSelectedFile().getAbsolutePath();
            puzzleGUI.resetScore();
            puzzleGUI.clearGuessedWordsArea();
            puzzleGUI.updateSortedWordsArea("");
            startGameWithFile(puzzleGUI, filePath);
         }

      });
   }

   private static void startGameWithFile(PuzzleGUI puzzleGUI, String filePath) {
      TextFileInput in = new TextFileInput(filePath);
      String letters = readLetters(in);
      String[] solutions = readSolutions(in);
      puzzleGUI.setLettersAndSolutions(letters, solutions);
      UnsortedWordList unsortedList = new UnsortedWordList();
      SortedWordList sortedList = new SortedWordList();
      String[] var7 = solutions;
      int var8 = solutions.length;

      for(int var9 = 0; var9 < var8; ++var9) {
         String solution = var7[var9];

         try {
            unsortedList.add(new Word(solution));
         } catch (IllegalWordException var12) {
            System.out.println("Illegal word found: " + solution + " - " + var12.getMessage());
         }
      }

      playGame(puzzleGUI, letters, unsortedList, sortedList);
   }

   private static String readLetters(TextFileInput in) {
      return in.readLine();
   }

   private static String[] readSolutions(TextFileInput in) {
      List<String> solutionsList = new ArrayList();

      String line;
      while((line = in.readLine()) != null) {
         solutionsList.add(line);
      }

      return (String[])solutionsList.toArray(new String[0]);
   }

   private static boolean isValidGuess(String guess, String letters) {
      char[] var2 = guess.toCharArray();
      int var3 = var2.length;

      for(int var4 = 0; var4 < var3; ++var4) {
         char c = var2[var4];
         if (letters.indexOf(c) == -1) {
            return false;
         }
      }

      return true;
   }

   private static void displayErrorMessage(String message) {
      JOptionPane.showMessageDialog((Component)null, message);
   }

   private static void playGame(PuzzleGUI puzzleGUI, String letters, UnsortedWordList unsortedList, SortedWordList sortedList) {
      int score = 0;
      String allowedLetters = "latipmo";

      while(score < unsortedList.size()) {
         String input = JOptionPane.showInputDialog(puzzleGUI.getFrame(), "Enter your guess:");
         if (input == null) {
            System.exit(0);
         } else {
            String lowercaseInput = input.toLowerCase();

            try {
               Word guessedWord = new Word(lowercaseInput);
               if (!lowercaseInput.contains("l")) {
                  displayErrorMessage("Your guess must contain 'L'");
               } else if (input.length() < 5) {
                  displayErrorMessage("Your guess is less than 5 letters long!");
               } else if (!isValidGuess(lowercaseInput, letters)) {
                  displayErrorMessage("Your guess contains letters that are not in the given set!");
               } else if (!unsortedList.contains(guessedWord)) {
                  displayErrorMessage("Your guess is not in the solutions list.");
               } else {
                  unsortedList.remove(guessedWord);
                  sortedList.add(guessedWord);
                  int pointsToAdd = 1;
                  if (containsAllAllowedLetters(lowercaseInput, allowedLetters)) {
                     pointsToAdd += 2;
                  }

                  puzzleGUI.addGuessedWord(input);
                  puzzleGUI.increaseScore(pointsToAdd);
                  score += pointsToAdd;
                  StringBuilder sortedWordsBuilder = new StringBuilder();

                  for(WordNode current = sortedList.head; current != null; current = current.next) {
                     sortedWordsBuilder.append(current.data.toString()).append("\n");
                  }

                  puzzleGUI.updateSortedWordsArea(sortedWordsBuilder.toString());
                  JOptionPane.showMessageDialog(puzzleGUI.getFrame(), "Your guess is correct! You earned " + pointsToAdd + " points.");
               }
            } catch (IllegalWordException var12) {
               displayErrorMessage("Your guess is illegal: " + var12.getMessage());
            }
         }

         if (score >= unsortedList.size()) {
            int playAgainResponse = JOptionPane.showConfirmDialog(puzzleGUI.getFrame(), "Congratulations! You have guessed all possible solutions. Play again?", "Play Again?", 0);
            if (playAgainResponse == 0) {
               puzzleGUI.resetScore();
               puzzleGUI.clearGuessedWordsArea();
               puzzleGUI.updateSortedWordsArea("");
               score = 0;
               unsortedList.reset();
               sortedList.reset();
            } else if (playAgainResponse == 1) {
               JOptionPane.showMessageDialog(puzzleGUI.getFrame(), "Enjoy your day!");
               System.exit(0);
            } else {
               JOptionPane.showMessageDialog(puzzleGUI.getFrame(), "Invalid input! Exiting the game.");
               System.exit(0);
            }
         }
      }

   }

   private static boolean containsAllAllowedLetters(String input, String allowedLetters) {
      char[] var2 = allowedLetters.toCharArray();
      int var3 = var2.length;

      for(int var4 = 0; var4 < var3; ++var4) {
         char c = var2[var4];
         if (!input.contains(String.valueOf(c))) {
            return false;
         }
      }

      return true;
   }
}
